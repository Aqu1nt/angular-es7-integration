{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/NgNext.js","src/decorators/Alias.js","src/decorators/Component.js","src/decorators/Config.js","src/decorators/Controller.js","src/decorators/Directive.js","src/decorators/Filter.js","src/decorators/Inject.js","src/decorators/MethodDecorators.js","src/decorators/Run.js","src/decorators/Self.js","src/decorators/Service.js","src/decorators/State.js","src/decorators/View.js","src/integration/WatchIterableFix.js","src/integration/ZoneJSIntegration.js","src/util/AngularModuleResolver.js","src/util/AngularUtils.js","src/util/Configuration.js","src/util/ES6Directive.js","src/util/Symbols.js"],"names":[],"mappings":"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","file":"ng-next.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// import \"./integration/ES6PromiseHook\" DEPRECATED for the sake of zone.js\r\nimport \"./util/AngularModuleResolver\" //Initialize the resolver at least once\r\nimport \"./integration/WatchIterableFix\"\r\n// import \"./integration/NG2EventBinding\" still experimental\r\n\r\n\r\n//Export the angular zone\r\nexport {NgZone} from \"./integration/ZoneJSIntegration\"\r\n\r\n//Export config\r\nexport {config} from \"./util/Configuration\"\r\n\r\n//Export decorators\r\nexport {Controller} from \"./decorators/Controller\"\r\nexport {Service} from \"./decorators/Service\"\r\nexport {Directive} from \"./decorators/Directive\"\r\nexport {Component, Bind} from \"./decorators/Component\"\r\nexport {Filter} from \"./decorators/Filter\"\r\nexport {Config} from \"./decorators/Config\"\r\nexport {Run} from \"./decorators/Run\"\r\nexport {View} from \"./decorators/View\"\r\nexport {Alias} from \"./decorators/Alias\"\r\nexport {Self} from \"./decorators/Self\"\r\nexport {State} from \"./decorators/State\"\r\nexport {Inject} from \"./decorators/Inject\"\r\nexport {Init, Destroy, Watch, WatchCollection, On, Debounce, Schedule, Abstract} from \"./decorators/MethodDecorators\"","import {alias as aliasSymbol} from \"../util/Symbols\"\r\n\r\n/**\r\n * Sets the alias for a controller, can only be used together with @State\r\n * and @Component\r\n * @decorator\r\n */\r\nexport function Alias(alias)\r\n{\r\n    return (target, name) => {\r\n        (target[name] || target)[aliasSymbol] = alias;\r\n        return target;\r\n    }\r\n}\r\n","import {module} from \"../util/AngularModuleResolver\"\r\nimport {decorateView} from \"./View\"\r\nimport * as symbols from \"../util/Symbols\"\r\n\r\n/**\r\n * Defines the class as Component\r\n *\r\n * A component is typically restricted to \"E\" => Element, meaning it will look like\r\n * <component></component> in html.\r\n *\r\n * You can configure the decorator either just with the component selector as string, or\r\n * with a typical angular directive config object, there are some shortcuts available:\r\n *  - controllerAs => as\r\n *  - scope => bind\r\n *  - template => view\r\n *\r\n *  A Component doesn't use the scope, but binds all properties to the controller directly instead.\r\n *\r\n *  If you're using class properties you can use the @Bind([type]) decorator to directly indicate the\r\n *  attributes that should be bound to the outer scope\r\n *\r\n * The @Component decorator can be used together with @View and @Alias and @Bind!\r\n *\r\n * @decorator\r\n * @param name\r\n * @param conf\r\n * @exports\r\n */\r\nexport function Component(name, conf = {})\r\n{\r\n    if (name.constructor != String)\r\n    {\r\n        name = name.selector || name.name;\r\n    }\r\n\r\n    conf.controllerAs = conf.as || conf.controllerAs;\r\n    conf.restrict = conf.restrict || \"E\";\r\n\r\n    if (conf.bindings == false) conf.bindings = false;\r\n    else conf.bindings = conf.bindings || conf.bind || {};\r\n\r\n    if (conf.bindings == false) {\r\n        throw new Error(`Components must have an isolated binding! in ${name}`);\r\n    }\r\n\r\n    conf.template = conf.view || conf.template;\r\n\r\n    return target => {\r\n        conf.controller = target;\r\n\r\n        module.then(m => {\r\n\r\n            m.directive(name, () => {\r\n\r\n                //Merge @Bind properties\r\n                conf.bindings = Object.assign(conf.bindings || {}, target[symbols.bind] || {});\r\n\r\n                conf.controllerAs = target[symbols.alias] || conf.controllerAs || \"$ctrl\";\r\n                conf.bindToController = conf.bindings;\r\n\r\n                decorateView(target, conf);\r\n\r\n                return conf;\r\n            })\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Defines a class property as bound attribute\r\n * @decorator\r\n * @param bindType = or & or @\r\n * @param [attributeName] the name of the attribute, defaults to the property name\r\n * @return {function(*, *, *)}\r\n */\r\nexport function Bind(bindType, attributeName)\r\n{\r\n    return (target, name, desc) => {\r\n\r\n        //Set default attribute name\r\n        if (!attributeName) attributeName = name;\r\n\r\n        //Add the bind property to the type\r\n        let type = target.constructor;\r\n        type[symbols.bind] = type[symbols.bind] || {};\r\n        type[symbols.bind][name] = bindType+attributeName;\r\n\r\n        return {\r\n            writable : true,\r\n            value : desc.value\r\n        };\r\n    }\r\n}\r\n","import {module} from \"../util/AngularModuleResolver\"\r\nimport {fetch} from \"../util/AngularUtils\"\r\n\r\n/**\r\n * Defines a method as config block\r\n * @decorator\r\n * @exports\r\n */\r\nexport function Config(target, name) {\r\n    target = fetch(target);\r\n    if (target instanceof Function) module.then(m => m.config(target));\r\n    else module.then(m => m.config(target[name]));\r\n}","import {module} from \"../util/AngularModuleResolver\"\r\nimport {fetch} from \"../util/AngularUtils\"\r\n\r\n/**\r\n * Defines a class as Controller, if no name is provided aka the decorator is\r\n * used as @Controller then the class name is used as controller name, you can\r\n * specify the name by using the decorator like @Controller(\"ControllerName\") to\r\n * make the decorator minify safe\r\n *\r\n * @decorator\r\n * @param {string | function} [clazz]\r\n */\r\nexport function Controller(clazz) {\r\n    clazz = fetch(clazz);\r\n\r\n    //Function to add the controller\r\n    let addController = (name, clazz) => module.then(m => m.controller(name, clazz));\r\n\r\n    if (clazz instanceof Function) {\r\n        addController(clazz.name, clazz);\r\n    }\r\n    else return (target) => {\r\n        addController(clazz, target);\r\n    };\r\n}","import {module} from \"../util/AngularModuleResolver\"\r\nimport {fetch} from \"../util/AngularUtils\"\r\nimport es6enabler from \"../util/ES6Directive\"\r\n\r\n/**\r\n * Defines a class or a class method as Directive, if no name is provided aka the decorator is\r\n * used as @Directive then the class name or the method name is used as directive name, you can\r\n * specify the name by using the decorator like @Directive(\"myDirectiy\") to\r\n * make the decorator minify safe\r\n *\r\n * @decorator\r\n * @param {string | function} clazz\r\n * @param {string} [name]\r\n * @returns {Function}\r\n * @exports\r\n */\r\nexport function Directive(clazz, name) {\r\n    clazz = fetch(clazz);\r\n\r\n    let registerDirective = (name, fn) => module.then(m => m.directive(name, es6enabler(fn)));\r\n\r\n    if (clazz.constructor != String) //Directive is called without name => @Directive\r\n    {\r\n        if (clazz instanceof Function) registerDirective(clazz.name, clazz); //Class\r\n        else registerDirective(name, clazz[name]); //Class method\r\n    }\r\n    else return (target, n) => { //Directive is called without name => @Directive(\"myDirective\")\r\n        if (target instanceof Function) registerDirective(clazz, target); //Class\r\n        else registerDirective(n, target[n]); //Class method\r\n    };\r\n}","import {module} from \"../util/AngularModuleResolver\"\r\nimport {fetch} from \"../util/AngularUtils\"\r\n\r\n/**\r\n * REgisters a method as an angular Filter\r\n * If used like @Filter the method name will be chosen as filter name,\r\n * Alternatively you can give the filter name as argument, your method will then look\r\n * like @Filter(\"myFilter\")...\r\n * @decorator\r\n * @exports\r\n */\r\nexport function Filter(clazz, method) {\r\n    clazz = fetch(clazz);\r\n\r\n    //Function to add the controller\r\n    let registerFilter = (name, fn) => module.then(m => m.filter(name, fn));\r\n\r\n    if (clazz.constructor != String) { //With method name as filter name\r\n        registerFilter(method, clazz[method]);\r\n    }\r\n    else return (target, method) => { //With specified name\r\n        registerFilter(clazz, target[method]);\r\n    };\r\n}","import {angularInjector, module} from \"../util/AngularModuleResolver\"\r\nimport * as symbols from \"../util/Symbols\"\r\nimport {callAnnotations} from \"../util/AngularUtils\"\r\n\r\n/**\r\n * Inject one of the following into the object:\r\n *      - services\r\n *      - $scope\r\n *      - any $scope variable\r\n *\r\n * the variable: usage =>\r\n * class foo {\r\n *      @Inject $timeout;\r\n *      @Inject(\"$timeout\") tmout;\r\n *      @Inject fooCtrl\r\n *      @Inject scopeVar\r\n *      @Inject $scope\r\n *\r\n *      constructor()\r\n *      {\r\n *          console.log(this.$timeout, this.tmout);\r\n *      }\r\n * }\r\n *\r\n * Attention! The property won't get injected instantly, but a getter\r\n * which will replace itself with the resolved object on the first call,\r\n * with this technique we're able to resolve circular dependencies sometimes\r\n *\r\n * @param target\r\n * @param name\r\n * @param descriptor\r\n * @decorator\r\n */\r\nexport function Inject(target, name, descriptor)\r\n{\r\n    let fieldName;\r\n    let injector = (target, name, descriptor) =>\r\n    {\r\n        if (descriptor.value instanceof Function) {\r\n            throw new Error(\"Can't use @Inject on a method\");\r\n        }\r\n\r\n        return {\r\n            set : function(value) {\r\n                Object.defineProperty(this, fieldName, {value, writable : true});\r\n            },\r\n            get : function() {\r\n\r\n                let $injector = angularInjector();\r\n                let obj = null;\r\n                let injected = false;\r\n\r\n                let locals = this[symbols.locals] || currentLocals;\r\n\r\n                //Locale\r\n                if (locals && (locals.hasOwnProperty(name) || locals[name])){\r\n                    obj = locals[name];\r\n                    injected = true;\r\n                }\r\n\r\n                //Service\r\n                else if ($injector.has(name)) {\r\n                    obj = $injector.get(name);\r\n                    injected = true;\r\n                }\r\n\r\n                //$scope or parent scope property\r\n                else if (locals && locals.$scope && (Reflect.hasOwnProperty(locals.$scope, name) || locals.$scope[name])){\r\n                    obj = locals.$scope[name];\r\n                    injected = true;\r\n                }\r\n\r\n                if (!injected) {\r\n                    console.error(`Wasn't able to @Inject ${name} as ${fieldName} into ${target.constructor.name}`);\r\n                    return;\r\n                }\r\n\r\n                Object.defineProperty(this, fieldName, {value : obj, writable : true});\r\n                return obj;\r\n            }\r\n        };\r\n    };\r\n\r\n    if (descriptor) {\r\n        fieldName = name;\r\n        return injector(target, name, descriptor);\r\n    }\r\n    else {\r\n        let nameReplacement = target;\r\n        return function(target, name, descriptor) {\r\n            fieldName = name;\r\n            return injector(target, nameReplacement, descriptor);\r\n        };\r\n    }\r\n}\r\n\r\n\r\nlet currentLocals = undefined;\r\nmodule.then(m => m.config([\"$provide\", function($provide){\r\n    $provide.decorator(\"$controller\", [\"$delegate\", function($delegate){\r\n        return function(expression, locals, later, ident){\r\n\r\n            //For usage in constructor\r\n            currentLocals = locals;\r\n\r\n            //Create the controller\r\n            let controller = $delegate(expression, locals, later, ident);\r\n\r\n            //Reset the locals\r\n            currentLocals = undefined;\r\n\r\n            //Check if its an object\r\n            if (!later){\r\n                controller[symbols.locals] = locals;\r\n                controller[symbols.scope] = locals.$scope;\r\n                callAnnotations(controller, locals.$scope);\r\n                return controller;\r\n            }\r\n            else {\r\n                return function(){\r\n                    currentLocals = locals;\r\n                    let c = controller();\r\n                    currentLocals = undefined;\r\n                    c[symbols.locals] = locals;\r\n                    c[symbols.scope] = locals.$scope;\r\n                    callAnnotations(c, locals.$scope);\r\n                    return c;\r\n                }\r\n            }\r\n        };\r\n    }])\r\n}]));\r\n","import {angularInjector} from \"../util/AngularModuleResolver\"\r\nimport * as symbols from \"../util/Symbols\"\r\n\r\n// This file contains the following decorators\r\n// @Init\r\n// @Destroy\r\n// @Watch\r\n// @WatchCollection\r\n// @On\r\n// @Debounce\r\n// @Abstract\r\n\r\n/**\r\n * Executes all Methods annotated with this annotation after\r\n * the object has been created\r\n *\r\n * Only working in services and controllers!\r\n *\r\n * @decorator\r\n */\r\nexport function Init(target, name, descriptor){\r\n    if (!descriptor) {\r\n        throw new Error(\"@Init can only be used on class methods\");\r\n    }\r\n    target[symbols.init] = target[symbols.init] || [];\r\n    target[symbols.init].push(name);\r\n}\r\n\r\n/**\r\n * Executes all Methods annotated with this annotation after\r\n * the object gets destroyed.\r\n *\r\n * Only usable in controllers!\r\n *\r\n * @param target\r\n * @param name\r\n * @exports\r\n * @decorator\r\n */\r\nexport function Destroy(target, name){\r\n    target[symbols.destroy] = target[symbols.destroy] || [];\r\n    target[symbols.destroy].push(name);\r\n}\r\n\r\n/**\r\n * Sets a $watch on the given controller evaluation, the method will be used\r\n * as regular $watch callback.\r\n *\r\n * If your controller has a property \"foo\" the following method would watch for\r\n * changes on \"foo\"\r\n *\r\n * \\@Watch(\"foo\")\r\n * fooChanged(newVal, oldVal)\r\n * {\r\n *  ........\r\n * }\r\n *\r\n * @param property\r\n * @param {boolean} [deep]\r\n * @exports\r\n * @decorator\r\n */\r\nexport function Watch(property, deep = false){\r\n\r\n    return (target, name) => {\r\n        target[symbols.watch] = target[symbols.watch] || [];\r\n        target[symbols.watch].push({property, name, deep, collection : false});\r\n    };\r\n}\r\n\r\n/**\r\n * Same as @Watch but for collections\r\n * @param [property]\r\n * @exports\r\n * @decorator\r\n */\r\nexport function WatchCollection(property){\r\n\r\n    return (target, name) => {\r\n        target[symbols.watch] = target[symbols.watch] || [];\r\n        target[symbols.watch].push({property, name, false, collection : true});\r\n    };\r\n}\r\n\r\n/**\r\n * Schedules the method so it will get executed every n milliseconds\r\n * @param interval in milliseconds\r\n * @decorator\r\n */\r\nexport function Schedule(interval)\r\n{\r\n    return (target, name, desc) => {\r\n        target[symbols.schedule] = target[symbols.schedule] || [];\r\n        target[symbols.schedule].push({interval, name})\r\n    }\r\n}\r\n\r\n/**\r\n * Registers the method as an eventhandler via $scope.$on\r\n *\r\n * \\@On(\"$stateChangeSucces\")\r\n * stateChanged(newState, oldState ...)\r\n * {\r\n *  .......\r\n * }\r\n *\r\n * @param event\r\n * @decorator\r\n */\r\nexport function On(event)\r\n{\r\n    return (target, name, desc) => {\r\n        target[symbols.on] = target[symbols.on] || [];\r\n        target[symbols.on].push({event, name})\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Debounces the method so it will only get executed after it hasn't been called\r\n * for n millis\r\n *\r\n * @param millis\r\n * @param {boolean} [angularTimeout=true] - if false the window timeout will get used\r\n * @returns {Function}\r\n * @decorator\r\n */\r\nexport function Debounce(millis, angularTimeout = true)\r\n{\r\n    return (target, name, desc) => {\r\n        let timeout;\r\n        let fn = desc.value;\r\n        desc.value = function(...args){\r\n\r\n            //Setup\r\n            let context = this;\r\n            let timeoutFn = function(){\r\n                fn.apply(context,args);\r\n            };\r\n\r\n            //Use angular $timeout ($apply cycle)\r\n            if (angularTimeout)\r\n            {\r\n                let $timeout = angularInjector().get(\"$timeout\");\r\n                $timeout.cancel(timeout);\r\n                timeout = $timeout(timeoutFn, millis);\r\n            }\r\n            //Use window timeout\r\n            else\r\n            {\r\n                clearTimeout(timeout);\r\n                timeout = setTimeout(timeoutFn, millis);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Marks a method as abstract, this means the method will get replaced\r\n * with one that throws an error when called saying the method\r\n * is not implemented\r\n * @param target\r\n * @param name\r\n * @param desc\r\n * @decorator\r\n */\r\nexport function Abstract(target, name, desc)\r\n{\r\n    desc.value = function(){\r\n        throw new Error(`${target.name}@${name} is not implemented (Abstract)`);\r\n    };\r\n}","import {module} from \"../util/AngularModuleResolver\"\r\nimport {fetch} from \"../util/AngularUtils\"\r\n\r\n/**\r\n * Defines a method as run block\r\n * @decorator\r\n * @exports\r\n */\r\nexport function Run(target, name) {\r\n    target = fetch(target);\r\n    if (target instanceof Function) module.then(m => m.run(target));\r\n    else module.then(m => m.run(target[name]));\r\n}","/**\r\n * The decorator may be used on classes or methods\r\n * ```\r\n * @Self\r\n * class FullBound {}\r\n *\r\n * class PartBound {\r\n *   @Self\r\n *   method () {}\r\n * }\r\n * ```\r\n *\r\n * @decorator\r\n */\r\nexport function Self(...args) {\r\n    if (args.length === 1) {\r\n        return boundClass(...args);\r\n    } else {\r\n        return boundMethod(...args);\r\n    }\r\n}\r\n\r\n/**\r\n * Use boundMethod to bind all methods on the target.prototype\r\n */\r\nfunction boundClass(target) {\r\n    // (Using reflect to get all keys including symbols)\r\n    let keys;\r\n    // Use Reflect if exists\r\n    if (typeof Reflect !== 'undefined' && typeof Reflect.ownKeys === 'function') {\r\n        keys = Reflect.ownKeys(target.prototype);\r\n    } else {\r\n        keys = Object.getOwnPropertyNames(target.prototype);\r\n        // use symbols if support is provided\r\n        if (typeof Object.getOwnPropertySymbols === 'function') {\r\n            keys = keys.concat(Object.getOwnPropertySymbols(target.prototype));\r\n        }\r\n    }\r\n\r\n    keys.forEach(key => {\r\n        // Ignore special case target method\r\n        if (key === 'constructor') {\r\n            return;\r\n        }\r\n\r\n        let descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\r\n\r\n        // Only methods need binding\r\n        if (typeof descriptor.value === 'function') {\r\n            Object.defineProperty(target.prototype, key, boundMethod(target, key, descriptor));\r\n        }\r\n    });\r\n    return target;\r\n}\r\n\r\n/**\r\n * Return a descriptor removing the value and returning a getter\r\n * The getter will return a .bind version of the function\r\n * and memoize the result against a symbol on the instance\r\n */\r\nfunction boundMethod(target, key, descriptor) {\r\n    let fn = descriptor.value;\r\n\r\n    if (typeof fn !== 'function') {\r\n        throw new Error(`@Self decorator can only be applied to methods not: ${typeof fn}`);\r\n    }\r\n\r\n    return {\r\n        configurable: true,\r\n        get : function() {\r\n            let self = this;\r\n            return (...params) => fn.call(self, ...params);\r\n        }\r\n    };\r\n}","import {module} from \"../util/AngularModuleResolver\"\r\nimport {fetch} from \"../util/AngularUtils\"\r\n\r\n/**\r\n * Defines a class as Service, if no name is provided aka the decorator is\r\n * used as @Service then the class name is used as service name, you can\r\n * specify the name by using the decorator like @Service(\"ServiceName\") to\r\n * make the decorator minify safe\r\n *\r\n * @decorator\r\n * @param {string | function} [clazz]\r\n */\r\nexport function Service(clazz) {\r\n    clazz = fetch(clazz);\r\n\r\n    //Function to add the controller\r\n    let addService = (name, clazz) => module.then(m => m.service(name, clazz));\r\n\r\n    if (clazz instanceof Function) {\r\n        addService(clazz.name, clazz);\r\n    }\r\n    else return (target) => {\r\n        addService(clazz, target);\r\n    };\r\n}","import {Controller} from \"./Controller\"\r\nimport {module} from \"../util/AngularModuleResolver\"\r\nimport {decorateView} from \"./View\"\r\nimport {config} from \"../util/Configuration\"\r\nimport * as symbols from \"../util/Symbols\"\r\n\r\n/**\r\n * Angular UI Router support\r\n *\r\n * With this Decorator you are able to decorate any class with @State,\r\n * as parameter you will give the usual state config\r\n *\r\n * In addition you can specify a default state by adding default : true\r\n * to the state config, this state will be called when a 404 aka a missing\r\n * url is requested. You're also able to shorten controllerAS to as.\r\n *\r\n * The class which is being decorated with @State will work as controller\r\n * for the specified state\r\n *\r\n * The State decorator works best with @Alias and @View\r\n *\r\n * @decorator\r\n * @param conf\r\n * @returns {Function}\r\n * @exports\r\n */\r\nexport function State(conf)\r\n{\r\n    return target => {\r\n        target[symbols.state] = conf;\r\n        Controller(target);\r\n        return target;\r\n    }\r\n}\r\n\r\n/**\r\n * Tries to configure the state from the $$state var on\r\n * the all controllers\r\n * @param clazz\r\n */\r\nmodule.then( m => {\r\n    m.config([\"$injector\", function ($injector) {\r\n        \"ngInject\";\r\n\r\n        let registeredControllers = [];\r\n        let states = [];\r\n\r\n        //Find every state controller\r\n        m._invokeQueue.forEach(item => {\r\n            let constructor = item[2][1];\r\n            if (registeredControllers.find((t) => t.type == constructor)) return;\r\n            if (constructor[symbols.state]) {\r\n                constructor[symbols.state].clazz = constructor;\r\n                states.push(constructor[symbols.state]);\r\n                registeredControllers.push({type: constructor});\r\n            }\r\n        });\r\n\r\n        //Return if ui-router is not installed\r\n        if (!$injector.has(\"$stateProvider\")) {\r\n\r\n            if (states.length) {\r\n                console.error(\"Error: @State is used but ui-router is not installed!\")\r\n            }\r\n            return;\r\n        }\r\n\r\n        //Fetch the state provider\r\n        let $stateProvider = $injector.get(\"$stateProvider\");\r\n        let $urlRouterProvider = $injector.get(\"$urlRouterProvider\");\r\n\r\n        //Indicator if a default state has been set\r\n        let defaultState = false;\r\n\r\n        //Configure all states\r\n        for (let conf of states) {\r\n            let clazz = conf.clazz;\r\n\r\n            //Set the default state if\r\n            if (conf.default) {\r\n                if (defaultState) {\r\n                    throw new Error(`Default state has already been set while configuring ${conf.name}, other default: ${defaultState.name}`);\r\n                }\r\n                defaultState = conf;\r\n                $urlRouterProvider.otherwise(function ($injector) {\r\n                    $injector.invoke(['$state', function ($state) {\r\n                        $state.go(conf.name, {}, {location: \"replace\"});\r\n                    }]);\r\n                });\r\n            }\r\n\r\n            //Set the controller\r\n            conf.controller = clazz;\r\n            conf.controllerAs = conf.as || conf.controllerAs || clazz[symbols.alias];\r\n\r\n            //Attempt to decorate @View decorator\r\n            decorateView(clazz, conf);\r\n\r\n            //Apply decorators\r\n            let decoratedConf = config.STATE_DECORATOR(conf);\r\n            if (decoratedConf) conf = decoratedConf;\r\n\r\n            //Finally configure the state onto the ui-router\r\n            $stateProvider.state(conf);\r\n        }\r\n    }]);\r\n});","import * as symbols from \"../util/Symbols\"\r\n\r\n/**\r\n * Sets the view of an @Component or a @State can either be\r\n * a template or a templateUrl, the view is recognized as template\r\n * if it contains at least 1 tag!\r\n * @param view\r\n * @Decorator\r\n */\r\nexport function View(view)\r\n{\r\n    return (target) => {\r\n        target[symbols.view] = view;\r\n        return target;\r\n    }\r\n}\r\n\r\n/**\r\n * Decorates the view to the configuration\r\n * @param clazz\r\n * @param conf\r\n */\r\nexport function decorateView(clazz, conf)\r\n{\r\n    let view = clazz[symbols.view];\r\n    if (!view) return;\r\n    let urlRegex = /[^<>]+\\.[A-Za-z]{2,5}$/;\r\n    if (urlRegex.test(\r\n        view)) { //url\r\n        conf.templateUrl = view;\r\n    } else {\r\n        conf.template = view;\r\n    }\r\n}","import {module} from \"../util/AngularModuleResolver\"\r\n\r\n/**\r\n * This module targets angulars missing ability to track objects following the ES6 iterator pattern,\r\n * where any object which has a [Symbol.iterator]() method is iterable.\r\n *\r\n * This module monkey patches every $scope to proxy $watchCollection and transform a possible iterable\r\n * into a simple array.\r\n *\r\n * If you want to access the original methods, you will have to call $scope[Symbol.for(\"$watchCollection\")]\r\n */\r\nmodule.then(module => {\r\n    /**\r\n     * Hook into the $rootScopeProvider to make sure we're the first ones to modify the $rootScope\r\n     */\r\n    module.config([\"$rootScopeProvider\", function($rootScopeProvider){\r\n        const $get = $rootScopeProvider.$get;\r\n        $rootScopeProvider.$get = [\"$injector\", \"$parse\", function($injector, $parse){\r\n            let $rootScope = $injector.invoke($get);\r\n\r\n            monkeyPatch$watchCollection($rootScope, $parse);\r\n            monkeyPatch$watchCollection($rootScope.__proto__.constructor.prototype, $parse);\r\n\r\n            return $rootScope;\r\n        }];\r\n    }]);\r\n});\r\n\r\n/**\r\n * Global symbols to access the\r\n * @type {Symbol}\r\n * @private\r\n */\r\nconst $watchCollection = Symbol.for(\"$watchCollection\");\r\n\r\n\r\n/**\r\n * Here we're actually patching the $watchCollection method\r\n * @param $target\r\n * @param $parse\r\n */\r\nfunction monkeyPatch$watchCollection($target, $parse)\r\n{\r\n    $target[$watchCollection] = $target.$watchCollection;\r\n\r\n    $target.$watchCollection = function(property, action){\r\n\r\n        let isFunc = typeof property == 'function';\r\n        let getter = isFunc ? property : $parse(property);\r\n        let iterableAsArray = undefined;\r\n        let $scope = this;\r\n\r\n        let monkeyPatchedObserver = function(){\r\n            let resolved = getter(isFunc ? undefined : $scope);\r\n\r\n            if (resolved && !(resolved instanceof Array) && resolved[Symbol.iterator])\r\n            {\r\n                //Reference changed, change our too\r\n                if (resolved !== iterableAsArray) {\r\n                    iterableAsArray = [];\r\n                }\r\n\r\n                //Refill array\r\n                iterableAsArray.length = 0;\r\n                for (let item of resolved) {\r\n                    iterableAsArray.push(item);\r\n                }\r\n\r\n                //And return it as result of the watch expression\r\n                return iterableAsArray;\r\n            }\r\n            iterableAsArray = undefined;\r\n\r\n            //If it's not an iterable non-array just return the original object\r\n            console.log(resolved, property);\r\n            return resolved;\r\n        };\r\n\r\n        return this[$watchCollection](monkeyPatchedObserver, action); //Must be this way because of maximum call stack size exceeded error\r\n    }\r\n}","import {config} from \"../util/Configuration\"\r\n\r\n//The default zone where runOutsideAngular() calls are being executed\r\nconst outerZone = Zone.current;\r\n\r\n//Create the angular zone\r\nexport const NgZone = outerZone.fork({\r\n    name : \"Angular Zone <ng-next>\",\r\n    onInvoke : function(delegate, current, target, callback, applyThis, args) {\r\n        try {\r\n            NgZone.$digested = false;\r\n            return delegate.invoke(target, callback, applyThis, args);\r\n        } finally {\r\n            $digestOnce();\r\n        }\r\n    },\r\n    onInvokeTask : function(delegate, current, target, task, applyThis, args) {\r\n        try {\r\n            NgZone.$digested = false;\r\n            return delegate.invokeTask(target, task, applyThis, args);\r\n        } finally {\r\n            $digestOnce();\r\n        }\r\n    }\r\n});\r\n\r\n// Add $digest to the zone\r\nNgZone.$digest = function(){};\r\n\r\n// Digests only if not already done\r\nconst $digestOnce = function () {\r\n    if (!NgZone.$digested) NgZone.$digest();\r\n    NgZone.$digested = false;\r\n};\r\n\r\n// Add runOutsideAngular to the zone\r\nNgZone.runOutsideAngular = function (fn) {\r\n    outerZone.run(fn);\r\n};\r\n\r\n//NgZone module\r\nexport const ngZoneModule = angular.module(\"ngZone\", []);\r\nngZoneModule.factory(\"NgZone\", () => NgZone);\r\n\r\n//Add auto-bootstrap handler\r\nangular.element(document).ready(() => {\r\n\r\n    if (!config.ZONE_JS)\r\n    {\r\n        angular.resumeBootstrap();\r\n    }\r\n    else\r\n    {\r\n        NgZone.run(() => {\r\n\r\n            //Export the angular zone onto the window if not existing\r\n            window.NgZone = window.NgZone || NgZone;\r\n\r\n            //Resume bootstrap inside of our angular zone\r\n            angular.resumeBootstrap([\"ngZone\"]).invoke([\"$rootScope\", ($rootScope) => {\r\n\r\n                //Patch root scopes digest to set an indicator on the zone\r\n                const digestSymbol = Symbol.for(\"$digest\");\r\n                $rootScope[digestSymbol] = $rootScope.$digest;\r\n\r\n                //If you want to digest on zone leave give \"false\" as parameter to $rootScope.$digest\r\n                $rootScope.$digest = function (disableZoneJS = true) {\r\n                    if (disableZoneJS) NgZone.$digested = true;\r\n                    this[digestSymbol]();\r\n                };\r\n\r\n                //Add digest to the angular zone\r\n                NgZone.$digest = function () {\r\n                    if (!$rootScope.$$phase){\r\n                        $rootScope.$digest();\r\n                    }\r\n                }\r\n\r\n            }]);\r\n        });\r\n    }\r\n});\r\n\r\n//Force angular to stop the bootstrap process\r\nwindow.name = \"NG_DEFER_BOOTSTRAP!\";\r\n","import {config} from \"./Configuration\"\r\n\r\n/**\r\n * Reference to the angular module used by Angular2to1, this module is either\r\n * resolved via ng-app or by useAngularModule(...)\r\n */\r\nlet angularModule = null;\r\n\r\n/**\r\n * The injector of our main module\r\n * This $injector service is set as soon as the module was requested\r\n * the first time and angular is beyond its run phase\r\n */\r\nlet $injector = null;\r\nlet $injectorRequested = false;\r\n\r\nlet requestInjector = function(){\r\n    if (angularModule && !$injectorRequested)\r\n    {\r\n        angularModule.run([\"$injector\", i => $injector = i]);\r\n        $injectorRequested = true;\r\n    }\r\n};\r\n\r\n/**\r\n * Attempts to lookup the root angular module of the app by resolving the first\r\n * ng-app on the DOM\r\n * As an alternative you can set your module with useAngularModule(), which will\r\n * then be returned by this function\r\n */\r\nexport function lookupAngularModule()\r\n{\r\n    try {\r\n        //Get manually specified module from config\r\n        if (config.MODULE && !angularModule) {\r\n            angularModule = config.MODULE;\r\n        }\r\n\r\n        //Returns the preset module if available\r\n        if (angularModule) {\r\n            return angularModule;\r\n        }\r\n\r\n        let ngAppHolder = angular.element(document.querySelector(\"[ng-app]\"));\r\n\r\n\r\n        if (!ngAppHolder.length) {\r\n            throw new Error(\"No element with [ng-app] found and no module set with 'useAngularModule()'\");\r\n        }\r\n\r\n        let moduleName = ngAppHolder[0].getAttribute('ng-app');\r\n        angularModule = angular.module(moduleName);\r\n\r\n        return angularModule;\r\n    } finally {\r\n        requestInjector();\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Sets the angular module which is used by Angular2to1\r\n * @param module\r\n */\r\nexport function useAngularModule(module)\r\n{\r\n    angularModule = module;\r\n    requestInjector();\r\n}\r\n\r\n/**\r\n * Returns the main $injector of the root angular\r\n * module, is available as soon as the module has been requested at least\r\n * once and angular is beyond its run phase\r\n * @decorator\r\n * @return {*}\r\n */\r\nexport function angularInjector()\r\n{\r\n    return $injector;\r\n}\r\n\r\nfunction moduleError(e)\r\n{\r\n    console.log(e);\r\n}\r\n\r\nconst modulePromise = new Promise(function (resolve) {\r\n    try  //If we're lucky the module does already exist\r\n    {\r\n        let module = lookupAngularModule();\r\n        requestInjector();\r\n        resolve(module);\r\n    }\r\n    catch (e) //Otherwise we must attempt to await its creation\r\n    {\r\n        /**\r\n         * If ng-app is defined we're monkey patching angulars module() function\r\n         * in order to get notified as soon as the module is available\r\n         * @type {Object}\r\n         */\r\n        let ngAppHolder = angular.element(document.querySelector(\"[ng-app]\"));\r\n        if (ngAppHolder.length)\r\n        {\r\n            let appModuleName = ngAppHolder[0].getAttribute('ng-app');\r\n            const origModuleFunction = angular.module;\r\n\r\n            if (!angular) {\r\n                throw new Error(\"Please include angular before ng-next!\");\r\n            }\r\n\r\n            //Monkey patch the module function to detect its creation\r\n            angular.module = function(name, dependencies)\r\n            {\r\n                let module = origModuleFunction(name, dependencies);\r\n\r\n                //Our main module is available\r\n                if (name == appModuleName && dependencies) {\r\n                    angular.module = origModuleFunction;\r\n                    angularModule = module;\r\n                    requestInjector();\r\n                    resolve(module);\r\n                }\r\n\r\n                return module;\r\n            };\r\n        } else {\r\n            //In case no ng-app is available we must monkey patch the config object to get\r\n            //Notified when the module is getting configured\r\n            let moduleSymbol = Symbol(\"MODULE\");\r\n            Object.defineProperty(config, \"MODULE\", {\r\n                set : module => {\r\n                    if (!config[moduleSymbol]) {\r\n                        angularModule = module;\r\n                        requestInjector();\r\n                        resolve(module);\r\n                    }\r\n                    config[moduleSymbol] = module\r\n                },\r\n                get : () => config[moduleSymbol]\r\n            })\r\n        }\r\n\r\n    }\r\n});\r\n\r\n\r\nexport {modulePromise as module}\r\n","import {angularInjector, module} from \"./AngularModuleResolver\"\r\nimport {config} from \"./Configuration\"\r\nimport * as symbols from \"../util/Symbols\"\r\n\r\n/**\r\n * If the argument is an array (inject) this method\r\n * will return only the function with the $inject property\r\n * set\r\n * @param arg\r\n * @returns {Function}\r\n */\r\nexport function fetch(arg)\r\n{\r\n    if (arg.constructor == Array)\r\n    {\r\n        let arr = arg;\r\n        arg = arr.splice(arr.length - 1, 1)[0];\r\n        arg.$inject = arr;\r\n    }\r\n    return arg;\r\n}\r\n\r\n// Run block which will configure all annotations on any services available\r\n// All services are used together with the $rootScope\r\n/**\r\n * Exposes all services of a single module\r\n * @param module\r\n */\r\nlet exposeModule = module => {\r\n    let $injector = angularInjector();\r\n    let $rootScope = $injector.get(\"$rootScope\");\r\n    module._invokeQueue.forEach(item => {\r\n        let def = item[2];\r\n        if ($injector.has(def[0])) {\r\n            let service = $injector.get(def[0]);\r\n            callAnnotations(service, $rootScope);\r\n        }\r\n    });\r\n};\r\n\r\n//Await the angular module\r\nmodule.then(m => {\r\n    m.run(() => {\r\n        if (config.ALLOW_DECORATORS_IN_SERVICES) {\r\n            exposeModule(m)\r\n        }\r\n    });\r\n});\r\n\r\n/**\r\n * Calls all registered annotations on the controller, or on\r\n * a service\r\n * @param controller\r\n * @param $scope\r\n */\r\nexport function callAnnotations(controller, $scope)\r\n{\r\n    //Async wrapper\r\n    let asyncWrapper = function (result) {\r\n        if (result instanceof Promise) {\r\n            result.then(() => $scope.$digest.call($scope));\r\n        }\r\n    };\r\n\r\n    //Call init methods\r\n    let inited = [];\r\n    for (let initializer of controller[symbols.init] || [])\r\n    {\r\n        if (!inited.includes(initializer)) {\r\n            asyncWrapper(controller[initializer]());\r\n        }\r\n        inited.push(initializer);\r\n    }\r\n\r\n    //Bind watches\r\n    let watched = [];\r\n    let $parse = angularInjector().get(\"$parse\");\r\n    for (let watcher of controller[symbols.watch] || []) {\r\n        if (!watched.includes(watcher)) {\r\n\r\n            //Parse the angular expression\r\n            let parse = $parse(watcher.property);\r\n            let getter = () => parse(controller);\r\n\r\n            let action = function(...params){\r\n                controller[watcher.name](...params);\r\n            }.bind(controller);\r\n\r\n            if (!watcher.collection) $scope.$watch(getter, action, !!watcher.deep);\r\n            else $scope.$watchCollection(getter, action);\r\n        }\r\n        watched.push(watcher);\r\n    }\r\n\r\n\r\n    //Bind events\r\n    let evented = [];\r\n    for (let on of controller[symbols.on] || []) {\r\n        if (! evented.includes(on)) {\r\n            $scope.$on(on.event, function(...params){\r\n                asyncWrapper(controller[on.name](...params));\r\n            }).bind(controller);\r\n        }\r\n        evented.push(on);\r\n    }\r\n\r\n    //Scheduled methods\r\n    let $interval = angularInjector().get(\"$interval\");\r\n    let scheduled = [];\r\n    for (let schedule of controller[symbols.schedule] || []) {\r\n        if (!scheduled.includes(schedule)){\r\n            let id = $interval(function(){\r\n                asyncWrapper(controller[schedule.name]());\r\n            }.bind(controller), schedule.interval);\r\n            $scope.$on(\"$destroy\", () => $interval.cancel(id));\r\n        }\r\n    }\r\n\r\n    //Call destroy methods\r\n    $scope.$on(\"$destroy\", function(){\r\n        let destroyed = [];\r\n        for (let destroyer of controller[symbols.destroy] || [])\r\n        {\r\n            if (!destroyed.includes(destroyer)) controller[destroyer]();\r\n            destroyed.push(destroyer);\r\n        }\r\n    });\r\n}","// The purpose of this file is to provide an easy configuration API\r\n// accesible from the outside\r\n\r\n/**\r\n * The module configuration, as an anonymous object\r\n */\r\nconst NgNextConfig =  {\r\n\r\n    //Angular module\r\n    MODULE : undefined,\r\n\r\n    //Zone.js\r\n    ZONE_JS : true,\r\n\r\n    //Further configuration\r\n    ALLOW_DECORATORS_IN_SERVICES : true,\r\n\r\n    //Decorators\r\n    STATE_DECORATOR : state => state\r\n};\r\n\r\nexport {NgNextConfig as config};","/**\r\n * This wrapper enables an intuitive way to use of es6 classes\r\n * as angular directive.\r\n * If you wrap your directive class with this function you can\r\n * use link/compile functions with \"this\" reference and @ngInject\r\n * on both the constructor and the controller!\r\n *\r\n * @param directive\r\n */\r\nexport default function(directive)\r\n{\r\n    /**\r\n     * Fetch function from array\r\n     */\r\n    if (directive.constructor == Array)\r\n    {\r\n        let arr = directive;\r\n        directive = arr.splice(arr.length - 1, 1)[0];\r\n        directive.$inject = arr;\r\n    }\r\n\r\n    //Check if directive is an actual class\r\n    try\r\n    {\r\n        directive();\r\n        return directive;\r\n    }\r\n    catch (e)\r\n    {\r\n        //Continue and wrap class to make it usable in angular\r\n        if(!(e instanceof TypeError)) return directive;\r\n    }\r\n\r\n    let fn = function(...inject)\r\n    {\r\n        //Create Directive\r\n        let instance = new directive(...inject);\r\n\r\n        //Wrap link call to keep this references\r\n        if (!!instance.link)\r\n        {\r\n            let link = instance.link;\r\n\r\n            instance.link = function(...args){\r\n                link.apply(instance, args);\r\n            };\r\n        }\r\n\r\n        //Wrap compile call to keep \"this\" reference\r\n        if (!!instance.compile)\r\n        {\r\n            let compile = instance.compile;\r\n\r\n            instance.compile = function(...args)\r\n            {\r\n                return compile.apply(instance, args);\r\n            }\r\n        }\r\n\r\n        //Return the directive to angular\r\n        return instance;\r\n    };\r\n\r\n    //Keep ngAnnotate injects\r\n    fn.$inject = directive.$inject;\r\n\r\n    return fn;\r\n};","export const state = Symbol(\"@State\");\r\nexport const view = Symbol(\"@View\");\r\nexport const alias = Symbol(\"@Alias\");\r\nexport const init = Symbol(\"@Init\");\r\nexport const destroy = Symbol(\"@Destroy\");\r\nexport const watch = Symbol(\"@Watch\");\r\nexport const on = Symbol(\"@On\");\r\nexport const schedule = Symbol(\"@Schedule\");\r\nexport const bind = Symbol(\"@Bind\");\r\nexport const scope = Symbol(\"Scope\");\r\nexport const locals = Symbol(\"Locals\");\r\n"],"preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}